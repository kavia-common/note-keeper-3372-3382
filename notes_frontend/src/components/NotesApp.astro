---
/**
 * NotesApp.astro
 * Main stateful client-side island for the full app UX, to avoid SSR prop mismatch and build errors.
 */
import Header from './Header.astro';
import Sidebar from './Sidebar.astro';
import NoteEditor from './NoteEditor.astro';

const { client: clientLoad = 'load' } = Astro.props; // For Astro hydration
---
<div id="notes-root"></div>
<script type="module">
  import { fetchAllNotes, fetchNote, createNote, updateNote, deleteNote } from "../utils/notesService.ts";
  import Sidebar from "./Sidebar.astro";
  import NoteEditor from "./NoteEditor.astro";
  import Header from "./Header.astro";

  // Make a minimal "renderer"
  let notes = [];
  let selectedNoteId = null;
  let selectedNote = null;
  let isEditing = false;

  function render() {
    const root = document.getElementById("notes-root");
    if (!root) return;
    root.innerHTML = `
    <div class="app-shell">
      ${Header ? '<header class="header"><h1>Note Keeper</h1></header>' : ''}
      <main id="main-ui">
        <aside class="sidebar">
          <div class="sidebar-header">
            <span class="list-title">Notes</span>
            <button class="add-btn" title="New note" type="button">+</button>
          </div>
          <ul class="note-list">
            ${
              notes.length === 0
                ? '<li class="note-empty">No notes yet</li>'
                : notes.map(note => `
                <li class="note-item${selectedNoteId === note.id ? ' selected' : ''}" data-id="${note.id}" tabindex="0" aria-selected="${selectedNoteId === note.id}">
                  <span class="note-title">${note.title ? note.title : "Untitled"}</span>
                  <span class="note-date">${note.updatedAt ? (new Date(note.updatedAt)).toLocaleDateString() : ""}</span>
                </li>
              `).join('')
            }
          </ul>
        </aside>
        <section class="editor-section">
          ${
            !selectedNote
            ? `<div class="editor-empty"><span>No note selected</span></div>`
            : `<form class="editor-form">
                <input type="text" name="title" class="editor-title" placeholder="Title" maxlength="120" value="${isEditing ? selectedNote.title : selectedNote.title}" ${isEditing ? '' : 'readonly'}>
                <textarea name="content" class="editor-content" placeholder="Type your note here..." rows="14" ${isEditing ? '' : 'readonly'}>${isEditing ? selectedNote.content : selectedNote.content}</textarea>
                <div class="editor-actions">
                  ${isEditing
                    ? `<button class="btn save-btn" type="submit" title="Save">üíæ Save</button>`
                    : `<button class="btn edit-btn" type="button" title="Edit">‚úèÔ∏è Edit</button>`
                  }
                  <button class="btn delete-btn" type="button" title="Delete" style="margin-left:auto">üóëÔ∏è Delete</button>
                </div>
                <span class="editor-updated">Last updated: ${selectedNote.updatedAt ? (new Date(selectedNote.updatedAt)).toLocaleString() : "never"}</span>
              </form>`
          }
        </section>
      </main>
    </div>
    `;
    // Attach all handlers
    // Sidebar
    root.querySelectorAll(".note-item").forEach(elem => {
      elem.onclick = () => selectNote(elem.getAttribute("data-id"));
    });
    const addBtn = root.querySelector(".add-btn");
    if (addBtn) addBtn.onclick = addNote;
    // Editor
    const editorForm = root.querySelector(".editor-form");
    if (editorForm) {
      editorForm.onsubmit = async e => {
        e.preventDefault();
        const formData = new FormData(editorForm);
        const title = formData.get("title");
        const content = formData.get("content");
        handleSave({ ...selectedNote, title, content });
      };
      const editBtn = root.querySelector(".edit-btn");
      if (editBtn) editBtn.onclick = () => handleEditMode(selectedNote);
      const deleteBtn = root.querySelector(".delete-btn");
      if (deleteBtn) deleteBtn.onclick = () => handleDelete(selectedNote.id);
    }
  }

  async function loadNotes(selectId = null) {
    notes = await fetchAllNotes();
    if (notes.length === 0) {
      selectedNoteId = null;
      selectedNote = null;
    } else {
      selectedNoteId = selectId || selectedNoteId || notes[0].id;
      selectedNote = notes.find(n => n.id === selectedNoteId) || notes[0];
    }
    isEditing = false;
    render();
  }
  function selectNote(id) {
    selectedNoteId = id;
    selectedNote = notes.find(n => n.id === id) || null;
    isEditing = false;
    render();
  }
  async function addNote() {
    const blank = { title: "", content: "" };
    const res = await createNote(blank);
    await loadNotes(res.id);
    isEditing = true;
    render();
  }
  function handleEditMode(note) {
    selectedNote = { ...note };
    isEditing = true;
    render();
  }
  async function handleSave(note) {
    if (note.id) await updateNote(note);
    await loadNotes(note.id);
  }
  async function handleDelete(id) {
    if (!id) return;
    if (!window.confirm("Delete this note? This cannot be undone.")) return;
    await deleteNote(id);
    await loadNotes();
  }

  window.addEventListener("DOMContentLoaded", () => loadNotes());
</script>
<style>
  .app-shell {
    min-height: 100vh;
    background: #fff;
    width: 100vw;
    height: min(100vh, 100dvh);
  }
  #main-ui {
    display: flex;
    flex-direction: row;
    min-height: 92vh;
    width: 100vw;
    background: #fff;
    margin: 0; padding: 0;
  }
  aside.sidebar {
    flex: 0 0 270px;
    min-width: 130px; max-width: 270px;
    height: auto;
    background: #f8f9fa;
    border-right: 1px solid #f3f3f3;
    display: flex; flex-direction: column; min-height: 0; min-width: 0; height: 100vh;
  }
  .sidebar-header {
    display: flex; align-items: center; justify-content: space-between;
    padding: 1.1rem 1rem 0.5rem 1rem;
    font-size: 1.08rem; font-weight: 600; color: #6C757D;
    border-bottom: 1px solid #efefef;
  }
  .list-title {
    text-transform: uppercase;
    letter-spacing: 0.07em; font-size: 1.01rem;
  }
  .add-btn {
    border: none; background: #007BFF; color: #fff; width:30px; height:30px;
    border-radius: 8px; font-weight: 700; font-size: 1.55rem; cursor: pointer; transition: background-color .18s;
    display: flex; align-items: center; justify-content: center;
  }
  .add-btn:hover, .add-btn:focus { background: #0056b3;}
  .note-list { margin:0; padding: 0.8rem 0; flex: 1 1 0; min-height: 0; overflow-y: auto; list-style: none;}
  .note-item { cursor: pointer; padding: 0.7rem 1.2rem; outline: none; font-size: 1.01rem; color: #444; border-left: 3px solid transparent; display: flex; flex-direction: column;
    background: transparent; border-radius: 5px; transition: all .13s;}
  .note-item.selected { background: #E9F3FF; color: #007BFF; border-left: 3px solid #007BFF;}
  .note-item:hover:not(.selected), .note-item:focus-visible:not(.selected) {
    background: #f1f5fa; color: #0056b3;
  }
  .note-title { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 95%;}
  .note-date { color: #aaa; font-size: 0.85rem; margin-top: 2px;}
  .note-empty { padding: 1.5rem 1.2rem; text-align: center; color: #bdbdbd; font-style: italic; font-size: 1.05rem;}
  .editor-section { flex: 1; width: 100%; background: #fff; display: flex; align-items: stretch; justify-content: stretch; min-width: 0; min-height: 0; padding: 0;}
  .editor-empty { width: 100%; margin: auto; color: #aaa; text-align: center; padding: 2.2rem 0; font-size: 1.14rem;}
  .editor-form { display: flex; flex-direction: column; min-height: 0; width: 100%; gap: 0.8rem; padding: 2.3rem 2.4rem 2rem 2.4rem; background: #FFF; border-radius: 10px; margin: auto; box-shadow: 0 0 0 0 rgba(0,0,0,0); max-width: 680px; }
  .editor-title { font-size: 1.3rem; padding: 0.7rem; font-weight: 600; border: 1px solid #CED4DA; border-radius: 7px; color: #007BFF; background: #f8f9fa; margin-bottom: 0.6rem;
    outline: none; transition: border-color 0.2s;}
  .editor-title:focus, .editor-title:active { border-color: #007BFF; background: #E9F3FF;}
  .editor-content { font-size: 1.09rem; padding: 0.75rem 0.8rem; border: 1px solid #ddd; border-radius: 6px; color: #232323; background: #fcfcfc; min-height: 220px; resize: vertical;
    line-height: 1.5; outline: none; transition: border-color 0.17s;}
  .editor-content:focus { border-color: #007BFF; background: #EFEFFF;}
  .editor-actions { display: flex; align-items: center; gap:1rem; margin-top: 0.5rem;}
  .btn { border: none; padding: 0.54rem 1.1rem; font-size:1.06rem; border-radius: 7px; font-weight: 600; cursor: pointer; transition: background 0.1s,color 0.1s;}
  .save-btn { background: #007BFF; color: #fff;}
  .edit-btn { background: #6C757D; color: #fff;}
  .delete-btn { background: #FFC107; color: #432700;}
  .save-btn:hover, .edit-btn:hover { filter: brightness(1.04);}
  .delete-btn:hover { background: #ff5e19; color: #fff;}
  .editor-updated { align-self: flex-end; font-size: 0.93rem; color: #7c7c7c; margin-top: 0.7rem;}

  @media (max-width: 900px) {
    #main-ui { flex-direction: column;}
    aside.sidebar { width: 100vw; max-width: none; border-right: none; border-bottom: 1px solid #e3e3e3; min-height: 0; height: auto;}
    .editor-form { padding: 1.2rem 1rem 1.4rem 1rem; }
  }
  @media (max-width: 600px) {
    #main-ui { flex-direction: column; min-height: unset;}
    aside.sidebar { min-width: 0; max-width: none; width: 100vw; border-bottom: 1px solid #ededed;}
    .editor-form, .editor-section { border-radius: 0;}
    .editor-form { padding: 0.7rem 0.25rem 0.9rem 0.25rem; min-width: 0;}
  }
</style>
