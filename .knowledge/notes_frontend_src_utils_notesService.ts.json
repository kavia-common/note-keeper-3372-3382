{"is_source_file": true, "format": "TypeScript", "description": "This file defines a NotesService module for managing notes. It provides in-memory and localStorage-based CRUD operations such as fetching, creating, updating, and deleting notes. The file includes type definitions for notes and functions to handle local storage interactions and promise-based API functions.", "external_files": [], "external_methods": [], "published": ["fetchAllNotes", "fetchNote", "createNote", "updateNote", "deleteNote"], "classes": [], "methods": [{"name": "function getFakeNotes(): Note[] { getFakeNotes", "description": "Provides sample notes data when no notes are stored in localStorage.", "scope": "", "scopeKind": ""}, {"name": "function loadNotes(): Note[] { loadNotes", "description": "Loads notes from localStorage, falling back to sample notes if none are available.", "scope": "", "scopeKind": ""}, {"name": "function saveNotes(notes: Note[]): void { saveNotes", "description": "Persists the provided list of notes to localStorage.", "scope": "", "scopeKind": ""}, {"name": "export function fetchAllNotes(): Promise<Note[]> { fetchAllNotes", "description": "Asynchronously fetches all notes with a simulated delay.", "scope": "", "scopeKind": ""}, {"name": "export function fetchNote(id: string): Promise<Note|null> { fetchNote", "description": "Asynchronously fetches a specific note by ID.", "scope": "", "scopeKind": ""}, {"name": "export function createNote(note: Omit<Note, 'id'|'updatedAt'>): Promise<Note> { createNote", "description": "Creates a new note, assigns it an ID and timestamp, and saves it.", "scope": "", "scopeKind": ""}, {"name": "export function updateNote(note: Note): Promise<Note> { updateNote", "description": "Updates an existing note identified by ID and refreshes the timestamp.", "scope": "", "scopeKind": ""}, {"name": "export function deleteNote(id: string): Promise<boolean> { deleteNote", "description": "Deletes a note by ID.", "scope": "", "scopeKind": ""}], "calls": ["setTimeout", "loadNotes()", "saveNotes()", "JSON.parse", "JSON.stringify", "window.localStorage.getItem", "window.localStorage.setItem", "Promise.resolve", "Promise.reject", "Array.prototype.find", "Array.prototype.findIndex", "Array.prototype.filter"], "search-terms": ["NotesService", "localStorage CRUD", "note management", "In-memory note handling", "TypeScript notes API", "notes frontend utility"], "state": 2, "file_id": 7, "knowledge_revision": 23, "git_revision": "", "revision_history": [{"15": ""}, {"17": ""}, {"23": ""}], "ctags": [{"_type": "tag", "name": "Note", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^type Note = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "STORAGE_KEY", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^const STORAGE_KEY = 'astro-notesapp-v1';$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "createNote", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^export function createNote(note: Omit<Note, 'id'|'updatedAt'>): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "deleteNote", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^export function deleteNote(id: string): Promise<boolean> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchAllNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^export function fetchAllNotes(): Promise<Note[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "fetchNote", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^export function fetchNote(id: string): Promise<Note|null> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "found", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const found = notes.find(n => n.id === id) || null;$/", "language": "TypeScript", "kind": "constant", "scope": "fetchNote", "scopeKind": "function"}, {"_type": "tag", "name": "getFakeNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^function getFakeNotes(): Note[] {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "i", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const i = notes.findIndex(n => n.id === note.id);$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^    id: 'note-' + Math.random().toString(36).slice(2,10),$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "loadNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^function loadNotes(): Note[] {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "newNote", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const newNote: Note = {$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const notes = loadNotes();$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const notes = loadNotes();$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const notes = loadNotes();$/", "language": "TypeScript", "kind": "constant", "scope": "fetchNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const notes = loadNotes();$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "prevLen", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const prevLen = notes.length;$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}, {"_type": "tag", "name": "saveNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^function saveNotes(notes: Note[]): void {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "stored", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^    const stored = window.localStorage.getItem(STORAGE_KEY);$/", "language": "TypeScript", "kind": "constant", "scope": "loadNotes", "scopeKind": "function"}, {"_type": "tag", "name": "updateNote", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^export function updateNote(note: Note): Promise<Note> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "updatedNotes", "path": "/home/kavia/workspace/code-generation/note-keeper-3372-3382/notes_frontend/src/utils/notesService.ts", "pattern": "/^  const updatedNotes = notes.filter(n => n.id !== id);$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}], "hash": "46079d917a5f4e831ed9585f472c1bdd", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/utils/notesService.ts"}